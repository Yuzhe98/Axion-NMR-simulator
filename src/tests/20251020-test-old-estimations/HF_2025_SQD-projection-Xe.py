"""
High-field sensitivity
"""

# import os
# import sys
# os.chdir("..")  # if you want to go to parent folder
# os.chdir("..")  # if you want to go to parent folder
# print(os.path.abspath(os.curdir))
# sys.path.insert(0, os.path.abspath(os.curdir))
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from functioncache import LF_2025, PhysicalQuantity
from math import pi

hf2025_SQD = LF_2025(
    B0_max=PhysicalQuantity(14.1, "T"),
    rho_E_DM=PhysicalQuantity(0.45, "GeV / cm**3"),
    va=PhysicalQuantity(270, "km / s"),
)

hf2025_SQD.getOmega_a()

hf2025_SQD.sampleLXe129_approx()

hf2025_SQD.getEfficPow(
    RBW_Hz=PhysicalQuantity(1, "Hz"), ALP_lw_Hz=PhysicalQuantity(10, "MHz")
)


Tmeas_list = []
freq_list = []
for freq_val in 10 ** (np.arange(3, 7, 1)):
    freq = PhysicalQuantity(freq_val, "Hz")
    freq_list.append(freq)
    Tmeas_list.append(1e4 * pi * hf2025_SQD.Q_a / freq)

hf2025_SQD.B0_max = PhysicalQuantity(14.1, "T")
freqmax = (hf2025_SQD.B0_max * hf2025_SQD.gamma / (2 * pi)).convert_to("Hz")
# check(freqmax)
for freq_val in [freqmax.value]:
    freq = PhysicalQuantity(freq_val, "Hz")
    freq_list.append(freq)
    Tmeas_list.append(1e4 * pi * hf2025_SQD.Q_a / freq)

# for freq_val in [150e6]:
#     freq = PhysicalQuantity(freq_val, "Hz")
#     freq_list.append(freq)
#     Tmeas_list.append(pi * hf2025_SQD.Q_a / freq)

# make plots
# plot style
plt.rc("font", size=8)  # font size for all figures
# plt.rcParams["font.family"] = "serif"
# plt.rcParams["font.serif"] = ["Times New Roman"]
plt.rcParams["font.family"] = "Times New Roman"
# plt.rcParams["mathtext.fontset"] = 'dejavuserif'

# Make math text match Times New Roman
plt.rcParams["mathtext.fontset"] = "cm"
plt.rcParams["mathtext.rm"] = "Times New Roman"


cm = 1 / 2.56  # convert cm to inch
fig = plt.figure(
    figsize=(8.5 * cm, 5 * cm), dpi=300
)  # initialize a figure following APS journal requirements

gs = gridspec.GridSpec(nrows=1, ncols=1)  # create grid for multiple figures
# fix the margins
left = 0.171
bottom = 0.202
right = 0.924
top = 0.983
wspace = 0.24
hspace = 0.114
fig.subplots_adjust(
    left=left, top=top, right=right, bottom=bottom, wspace=wspace, hspace=hspace
)

ax00 = fig.add_subplot(gs[0, 0])  #
# ax01 = fig.add_subplot(gs[0, 1])  #
# ax10 = fig.add_subplot(gs[1, 0])  #
# ax11 = fig.add_subplot(gs[1, 1])  #
hf2025_SQD.plotXe129_Sensi_Phase2(
    ax=ax00, freq_list=freq_list, Tmeas_list=Tmeas_list, verbose=False
)
# plt.tight_layout()  # this is not a good way to set margins if you want good quality

# # Get the script name and path automatically
# script_path = os.path.abspath(__file__)
# # Add the annotation to the figure
# plt.annotate(f"Generated by: {script_path}",
#              xy=(0.02, 0.02),
#              xycoords='figure fraction',
#              fontsize=3,
#              color='gray')

# plt.savefig('Figures/exclusion.png', transparent=True)
# lf2025.plot2017OverviewLimit(ax=ax00)
# ax00.set_xticks([1e3, 1e4, 1e5, 1.2e6, 1e7, 600e6])
# ax00.set_xticklabels(["1 kHz", "10 kHz", "100 kHz", "1.2 MHz", "10 MHz", "600 MHz"])

# ax00.set_yticks([1e-10, 1e-12, 1e-14, 1e-16])
# ax00.set_xticklabels(["1 kHz", "10 kHz", "100 kHz", "1.2 MHz", "10 MHz", "600 MHz"])

ax00.legend()
plt.show()
