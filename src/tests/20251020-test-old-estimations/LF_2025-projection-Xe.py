"""
Low-field sensitivity
"""

# import os
# import sys
# os.chdir("..")  # if you want to go to parent folder
# os.chdir("..")  # if you want to go to parent folder
# print(os.path.abspath(os.curdir))
# sys.path.insert(0, os.path.abspath(os.curdir))
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from functioncache import LF_2025, PhysicalQuantity
from math import pi

lf2025 = LF_2025()
lf2025.getOmega_a()


lf2025.sampleLXe129()
# lf2025.T2 = 1
# check(lf2025.T2)
# check((lf2025.B0_max))
lf2025.getEfficPow(
    RBW_Hz=PhysicalQuantity(1, "Hz"), ALP_lw_Hz=PhysicalQuantity(1, "MHz")
)
Tmeas_list = []
freq_list = []
for freq_val in 10 ** (np.arange(3, 7, 1)):
    freq = PhysicalQuantity(freq_val, "Hz")
    freq_list.append(freq)
    Tmeas_list.append(10 * pi * lf2025.Q_a / freq)
lf2025.B0_max = PhysicalQuantity(0.1, "T")
freqmax = (lf2025.B0_max * lf2025.gamma / (2 * pi)).convert_to("Hz")
# check(freqmax)
for freq_val in [freqmax.value]:
    freq = PhysicalQuantity(freq_val, "Hz")
    freq_list.append(freq)
    Tmeas_list.append(10 * pi * lf2025.Q_a / freq)

# lf2025.thermMethanol_Sensi([PhysicalQuantity(1.348, 'MHz')], [PhysicalQuantity(100, 's')])
# lf2025.thermMethanol_Sensi(freq_list, Tmeas_list)
# lf2025.plotThermMethanol_Sensi(freq_list, Tmeas_list, verbose=True)

# make plots
# plot style
plt.rc("font", size=8)  # font size for all figures
# plt.rcParams["font.family"] = "serif"
# plt.rcParams["font.serif"] = ["Times New Roman"]
plt.rcParams["font.family"] = "Times New Roman"
# plt.rcParams["mathtext.fontset"] = 'dejavuserif'

# Make math text match Times New Roman
plt.rcParams["mathtext.fontset"] = "cm"
plt.rcParams["mathtext.rm"] = "Times New Roman"

# plt.style.use('seaborn-dark')  # to specify different styles
# print(plt.style.available)  # if you want to know available styles

cm = 1 / 2.56  # convert cm to inch
fig = plt.figure(
    figsize=(8.5 * cm, 5 * cm), dpi=300
)  # initialize a figure following APS journal requirements

gs = gridspec.GridSpec(nrows=1, ncols=1)  # create grid for multiple figures
# fix the margins
left = 0.171
bottom = 0.202
right = 0.924
top = 0.983
wspace = 0.24
hspace = 0.114
fig.subplots_adjust(
    left=left, top=top, right=right, bottom=bottom, wspace=wspace, hspace=hspace
)

ax00 = fig.add_subplot(gs[0, 0])  #
# ax01 = fig.add_subplot(gs[0, 1])  #
# ax10 = fig.add_subplot(gs[1, 0])  #
# ax11 = fig.add_subplot(gs[1, 1])  #
freq_vals, glim_vals = lf2025.plotXe129_Sensi_Phase1(
    ax=ax00, freq_list=freq_list, Tmeas_list=Tmeas_list, verbose=True
)

# plt.tight_layout()  # this is not a good way to set margins if you want good quality

# # Get the script name and path automatically
# script_path = os.path.abspath(__file__)
# # Add the annotation to the figure
# plt.annotate(f"Generated by: {script_path}",
#              xy=(0.02, 0.02),
#              xycoords='figure fraction',
#              fontsize=3,
#              color='gray')

# plt.savefig('Figures/exclusion.png', transparent=True)
# lf2025.plot2017OverviewLimit(ax=ax00)
# ax00.set_xticks([1e3, 1e4, 1e5, 1.2e6, 1e7, 600e6])
# ax00.set_xticklabels(["1 kHz", "10 kHz", "100 kHz", "1.2 MHz", "10 MHz", "600 MHz"])

ax00.set_yticks([1e-10, 1e-12, 1e-14, 1e-16])
# ax00.set_xticklabels(["1 kHz", "10 kHz", "100 kHz", "1.2 MHz", "10 MHz", "600 MHz"])

ax00.legend()


plt.show()

np.savetxt(
    "LF-projection-Xe - 4.txt",
    np.array([freq_vals, glim_vals]).transpose(),
    header="Sample: pure liquid Xe-129\nPolarization: 10 %\nSample volume: 1.2 cm^3\nPSD noise: 1e-6 Phi_0 sqrt(Hz)^-1 (SQUID noise)\nMeasurement time: 10 tau_a's at each frequency\nB0 homogeneity: 2 ppm\nT2: 1000 s\nfrequencies (Hz)  g_lim (GeV^-1)",
)
