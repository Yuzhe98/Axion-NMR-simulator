"""
Low-field sensitivity
"""
# import os
# import sys
# os.chdir("..")  # if you want to go to parent folder
# os.chdir("..")  # if you want to go to parent folder
# print(os.path.abspath(os.curdir))
# sys.path.insert(0, os.path.abspath(os.curdir))
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from functioncache import LF_2025, PhysicalQuantity, check
from math import pi

lf2025 = LF_2025()
# lf2025.getOmega_a_1()


# lf2025.sampleLXe129()
# # lf2025.T2 = 1
# # check(lf2025.T2)
# # check((lf2025.B0_max))
# lf2025.getEfficPow(
#     RBW_Hz=PhysicalQuantity(1, "Hz"), ALP_lw_Hz=PhysicalQuantity(10, "MHz")
# )
# Tmeas_list = []
# freq_list = []
# for freq_val in 10 ** (np.arange(3, 7, 1)):
#     freq = PhysicalQuantity(freq_val, "Hz")
#     freq_list.append(freq)
#     Tmeas_list.append(pi * lf2025.Q_a / freq)

# freqmax = (lf2025.B0_max * lf2025.gamma / (2 * pi)).convert_to("Hz")
# # check(freqmax)
# for freq_val in [freqmax.value]:
#     freq = PhysicalQuantity(freq_val, "Hz")
#     freq_list.append(freq)
#     Tmeas_list.append(pi * lf2025.Q_a / freq)

# lf2025.thermMethanol_Sensi([PhysicalQuantity(1.348, 'MHz')], [PhysicalQuantity(100, 's')])
# lf2025.thermMethanol_Sensi(freq_list, Tmeas_list)
# lf2025.plotThermMethanol_Sensi(freq_list, Tmeas_list, verbose=True)

# make plots
# plot style
plt.rc("font", size=8)  # font size for all figures
# plt.rcParams["font.family"] = "serif"
# plt.rcParams["font.serif"] = ["Times New Roman"]
plt.rcParams["font.family"] = "Times New Roman"
# plt.rcParams["mathtext.fontset"] = 'dejavuserif'

# Make math text match Times New Roman
plt.rcParams["mathtext.fontset"] = "cm"
plt.rcParams["mathtext.rm"] = "Times New Roman"

# plt.style.use('seaborn-dark')  # to specify different styles
# print(plt.style.available)  # if you want to know available styles

cm = 1 / 2.56  # convert cm to inch
fig = plt.figure(
    figsize=(8.5 * cm, 5 * cm), dpi=300
)  # initialize a figure following APS journal requirements

gs = gridspec.GridSpec(nrows=1, ncols=1)  # create grid for multiple figures
# fix the margins
left=0.171
bottom=0.23
right=0.97
top=0.983
wspace=0.24
hspace=0.114
fig.subplots_adjust(left=left, top=top, right=right,
                    bottom=bottom, wspace=wspace, hspace=hspace)

ax00 = fig.add_subplot(gs[0, 0])  #
# ax01 = fig.add_subplot(gs[0, 1])  #
# ax10 = fig.add_subplot(gs[1, 0])  #
# ax11 = fig.add_subplot(gs[1, 1])  #
# lf2025.plotXe129_Sensi(ax=ax00, freq_list=freq_list, Tmeas_list=Tmeas_list, verbose=True)

# plt.tight_layout()  # this is not a good way to set margins if you want good quality

# # Get the script name and path automatically
# script_path = os.path.abspath(__file__)
# # Add the annotation to the figure
# plt.annotate(f"Generated by: {script_path}",
#              xy=(0.02, 0.02),
#              xycoords='figure fraction',
#              fontsize=3,
#              color='gray')

# plt.savefig('Figures/exclusion.png', transparent=True)
lf2025.plot2017OverviewLimit(ax=ax00)
# ax00.set_xticks([1, 1e3, 1e6, 1e6, 1e9])
# ax00.set_xticklabels(["1 kHz", "10 kHz", "100 kHz", "1.2 MHz", "10 MHz", "600 MHz"])



# ax00.set_xlim(0, 53)
# ax00.set_ylim(1e-10, 1e-2)

ax00.set_xscale("log")
# ax00.set_yscale('linear')
# ax00.set_xscale('log')
ax00.set_yscale("log")


ax00.set_yticks([1e-2, 1e-6, 1e-10, 1e-14])
# ax00.set_xticklabels(["1 kHz", "10 kHz", "100 kHz", "1.2 MHz", "10 MHz", "600 MHz"])

ax00.set_ylim(top=1e-0, bottom=1e-15)

# ax00.set_xticks(freq_vals[[0, 1, 2, 4]])
# ax00.set_xticklabels(["1 kHz", "10 kHz", "100 kHz", "1.2 MHz"])
# ax00.set_yticks([1e-2, 1e-4, 1e-6, 1e-8, 1e-10])
# ax00.set_yticklabels([1, 10, 100, 1000])
# ax00.set_ylim(bottom=0.1)
# ax00.legend(loc='upper right')
ax00.grid(True)

ax00.set_xlabel(f"Frequency")
ax00.set_ylabel("$|g_\\mathrm{aNN}| [\\mathrm{GeV}^{-1}]$ ", color="k")

plt.show()